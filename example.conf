
# The name of the bot (in the username= stanza, the 'botname' part) has to go
# in the block header below this comment.  That's what tells the bot which
# parts of the file belong to it.  It's an idiosyncracy of Python's
# ConfigParser module.  This also means that, in theory, a fleet of Exocortex
# bots can share a config file.  I don't recommend this because it makes things
# really messy.  This also means that there can be a single config file template
# for every bot subtype, and they'll ignore configuration directives that they
# aren't programmed to recognize.
[bot_name]

# The owner field is set up this way because group chat nicks are used instead
# of JIDs by XMPP.  Rather than do a lot of query juggling, we can do it IRC
# style and move on to doing interesting things.
owner = user@host (MUC nickname)
username = botname@host
password = password

# Conferences have to be specified as roomname@conference.servername
muc = MUC@conference.host
muclogin = This is a message for the MUC that says that the bot's logged in.

# Possible loglevels: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
loglevel = DEBUG
imalive = Message that is displayed when someone pokes the bot to see if it's alive.
responsefile = Filename that stores the bot's random conversational responses.
function = Text statement that says what the bot's purpose is.

# Microblog access configuration.
# Type of microblog API.  Possible values: twitter, statusnet
type = twitter

# API access keys for Twitter.  Note that the account for which these keys are
# generated must have read and write access to Twitter.
api_key = 
api_secret = 
access_token = 
access_token_secret = 

